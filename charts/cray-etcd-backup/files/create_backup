#!/bin/sh
#
# MIT License
#
# (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#

cluster=$1
backup_name=$2
s3_endpoint=$(cat /${HOME}/.aws/s3_endpoint)
ns=$(kubectl get statefulsets.apps -A | grep ${cluster}-bitnami-etcd | awk '{print $1}')
new_snapshot=""

if test "$#" -ne 2; then
    echo "Usage: create_backup <project_name> <backup_name>"
    exit 1
fi

pods=$(kubectl get endpoints ${cluster}-bitnami-etcd -n ${ns} -o jsonpath='{.subsets[*].addresses[*].targetRef.name}')
for pod in $pods
do
  echo "Taking snapshot from ${pod}..."
  output=$(kubectl exec -i -n ${ns} ${pod} -c etcd -- /bin/sh -c "ETCD_SNAPSHOTS_DIR=$snapshot_dir /opt/bitnami/scripts/etcd/snapshot.sh" 2>/dev/null)
  if [ $? -eq 0 ]; then
     new_snapshot=$(echo "$output" | grep "Snapshot saved at" | awk '{print $NF}')
     break
  fi
done

echo "Pushing newly created snapshot ${new_snapshot} to S3 as ${backup_name} for ${cluster}"
aws s3 cp --endpoint-url ${s3_endpoint} ${new_snapshot} s3://etcd-backup/${cluster}/${backup_name}
